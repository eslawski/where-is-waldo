{"version":3,"sources":["../node_modules/react-iiif-viewer/dist sync","App.js","serviceWorker.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","App","height","width","iiifUrls","Object","values","waldo_8","waldo_1","waldo_12","waldo_13","waldo_15","waldo_4","waldo_5","waldo_6","waldo_7","waldo_9","waldo_14","waldo_10","waldo_11","waldo_3","waldo_2","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kLAAA,SAASA,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoBK,KAAO,WAAa,MAAO,IAC/CL,EAAoBM,QAAUN,EAC9BO,EAAOC,QAAUR,EACjBA,EAAoBS,GAAK,I,4FC2BVC,MA9Bf,WAqBE,OACI,kBAAC,cAAD,CACIC,OAAO,OACPC,MAAM,OACNC,SAAUC,OAAOC,OAtBR,CACXC,QAAS,8GACTC,QAAS,+GACTC,SAAU,+GACVC,SAAU,+GACVC,SAAU,+GACVC,QAAS,+GACTC,QAAS,+GACTC,QAAS,+GACTC,QAAS,+GACTC,QAAS,+GACTC,SAAU,+GACVC,SAAU,+GACVC,SAAU,8GACVC,QAAS,+GACTC,QAAS,oHCXGC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b3b90df3.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 11;","import React from 'react';\nimport './App.css';\n\nimport { MultiViewer } from \"react-iiif-viewer\"\n\nfunction App() {\n\n    // IIIF urls for the images stored in /images\n    const waldos = {\n        waldo_8: \"https://free.iiifhosting.com/iiif/6b97f7abc5f6e3bc63cbabb7e4f1c8f40521c2c2deb1a0820ee312f9e51c298/info.json\",\n        waldo_1: \"https://free.iiifhosting.com/iiif/361e604c0f966fb96c218cc288d4859d4acfa2ff427282e837255c9820b76007/info.json\",\n        waldo_12: \"https://free.iiifhosting.com/iiif/4af2632397f258be27a6671fbc1d1855c709a5b9e279f5ddf3dce4e0787bcde4/info.json\",\n        waldo_13: \"https://free.iiifhosting.com/iiif/9f76cd22ec64985ae8c75887b72cbed0c26bdca78ef7fb79503e488055d1cd01/info.json\",\n        waldo_15: \"https://free.iiifhosting.com/iiif/714c4f14587ae5237719669d63e058dfcba4e5736462200356c6dc394d64c162/info.json\",\n        waldo_4: \"https://free.iiifhosting.com/iiif/32ea524fdf98641b0c3d206c25ad62b30ddf11e44ec2c53ada4e097e68102c10/info.json\",\n        waldo_5: \"https://free.iiifhosting.com/iiif/92bd0e8fc636a67e7924578def060282f599479e208d750ecc7dc70ac78f4435/info.json\",\n        waldo_6: \"https://free.iiifhosting.com/iiif/9bc5572ce8b207da22a3fb8d6d10a928fe2dce69763fd4aa180d107984b5d946/info.json\",\n        waldo_7: \"https://free.iiifhosting.com/iiif/2ca94108f4631786f2f37efd631b45f4f04a46f92b331997108933933fe94b13/info.json\",\n        waldo_9: \"https://free.iiifhosting.com/iiif/4af2632397f258be27a6671fbc1d1855c709a5b9e279f5ddf3dce4e0787bcde4/info.json\",\n        waldo_14: \"https://free.iiifhosting.com/iiif/7776b80ee305f59edcd0650c682ac5360f32926bbdd8949fa36b771c2d9a5f1b/info.json\",\n        waldo_10: \"https://free.iiifhosting.com/iiif/45b419ba0668469db02f5858a97ed848485305c2a54a1034c86274a99c114eb9/info.json\",\n        waldo_11: \"https://free.iiifhosting.com/iiif/89078297ef638b5d3968f89fc074fe8520c6cc469770b3e7095120e2fb14e3e/info.json\",\n        waldo_3: \"https://free.iiifhosting.com/iiif/dad56a0f19edb2656dafefe96e2308e457a43977891984e67f8dd2cdb75ebcb6/info.json\",\n        waldo_2: \"https://free.iiifhosting.com/iiif/f3f9f42664008fb5aec8114a79f6f6e9e86d2a608acb338270ac3ff995644335/info.json\",\n    }\n\n  return (\n      <MultiViewer\n          height=\"100%\"\n          width=\"100%\"\n          iiifUrls={Object.values(waldos)}\n      />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}