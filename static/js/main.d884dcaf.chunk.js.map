{"version":3,"sources":["images/information.png","images/wally-and-friends.png","../node_modules/react-iiif-viewer/dist sync","Information.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","webpackEmptyContext","req","e","Error","code","keys","resolve","id","Information","useState","modalOpen","setModalOpen","className","src","infoIcon","onClick","wallyAndFriends","href","App","height","width","iiifUrls","Object","values","waldo_dino_spaceman_gouls","waldo_giants","waldo_underground","waldo_knights_and_flags","waldo_underwater","waldo_silent_movie","waldo_swashbuckling_musketeers","waldo_song_and_dance","waldo_ali_baba_thieves","waldo_robin_hood","waldo_stars","wald_horseplay_troy","waldo_waldos","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2GAAAA,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,+C,wFCA3C,SAASC,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoBK,KAAO,WAAa,MAAO,IAC/CL,EAAoBM,QAAUN,EAC9BF,EAAOC,QAAUC,EACjBA,EAAoBO,GAAK,I,8JCqBVC,MAvBf,WAAwB,IAAD,EACeC,oBAAS,GADxB,mBACZC,EADY,KACDC,EADC,KAGnB,OACI,oCACI,yBAAKC,UAAU,YAAYC,IAAKC,IAAUC,QAAS,kBAAMJ,GAAcD,MACvE,yBAAKE,UAAS,qBAAgBF,EAAY,OAAS,WAC/C,8CAEA,yBAAKE,UAAU,gBAAf,uGAIA,yBAAKA,UAAU,oBAAoBC,IAAKG,MAExC,yBAAKJ,UAAU,cAAcG,QAAS,kBAAMJ,GAAa,KAAzD,aAEA,8CAAmB,uBAAGM,KAAK,iDAAR,yBCapBC,MA9Bf,WAkBE,OACI,oCACI,kBAAC,EAAD,MACA,kBAAC,cAAD,CACIC,OAAO,OACPC,MAAM,OACNC,SAAUC,OAAOC,OAtBZ,CACXC,0BAA2B,+GAC3BC,aAAc,+GACdC,kBAAmB,+GACnBC,wBAAyB,+GACzBC,iBAAkB,+GAClBC,mBAAoB,+GACpBC,+BAAgC,+GAChCC,qBAAsB,+GACtBC,uBAAwB,+GACxBC,iBAAkB,+GAClBC,YAAa,+GACbC,oBAAqB,+GACrBC,aAAc,qHCTFC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d884dcaf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/information.dc30b334.png\";","module.exports = __webpack_public_path__ + \"static/media/wally-and-friends.29b2fa83.png\";","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 14;","import React, {useState} from 'react';\nimport './Information.css';\nimport infoIcon from './images/information.png'\nimport wallyAndFriends from './images/wally-and-friends.png'\n\n\nfunction Information() {\n    const [modalOpen, setModalOpen] = useState(true);\n\n    return (\n        <>\n            <img className=\"info-icon\" src={infoIcon} onClick={() => setModalOpen(!modalOpen)}/>\n            <div className={`info-modal ${modalOpen ? 'open' : 'closed'}`}>\n                <h1>Where's Waldo?</h1>\n\n                <div className=\"instructions\">\n                    Waldo and his friends have gone missing! Can you help find all of them in each of the wacky worlds?\n                </div>\n\n                <img className=\"wally-and-friends\" src={wallyAndFriends}/>\n\n                <div className=\"close-modal\" onClick={() => setModalOpen(false)}>Let's Go!</div>\n\n                <small>built using <a href=\"https://github.com/eslawski/react-iiif-viewer\">react-iiif-viewer</a></small>\n            </div>\n        </>\n    )\n}\n\nexport default Information;\n","import React from 'react';\nimport './App.css';\n\nimport { MultiViewer } from \"react-iiif-viewer\"\nimport Information from \"./Information\"\n\nfunction App() {\n\n    const waldos = {\n        waldo_dino_spaceman_gouls: \"https://free.iiifhosting.com/iiif/db383b129d6668bd4e1e2de29d8d1fd08bedcfbb0dd8419498d4afe5f085653e/info.json\",\n        waldo_giants: \"https://free.iiifhosting.com/iiif/5d27044f6301995a72e21df119c7153a1e245f8d518f78fc8d26ba1ebf0654bc/info.json\",\n        waldo_underground: \"https://free.iiifhosting.com/iiif/8ce6089742d76438ec5541c41f4737b6c288ac58ab31febe0a4e5bdc78a44f45/info.json\",\n        waldo_knights_and_flags: \"https://free.iiifhosting.com/iiif/59418d5cab0d4fc02337f281605cac49b6f38c8ff1dfd745b53f05300d590d56/info.json\",\n        waldo_underwater: \"https://free.iiifhosting.com/iiif/fe47c32a481ae9489d7bd1ae4151bfb8f1e59f9fedf5537804f013f1f1b3d9b7/info.json\",\n        waldo_silent_movie: \"https://free.iiifhosting.com/iiif/a52a45e8e09d7160c5c42221ef5f6921900a18628dbbc69c890c631bc3815313/info.json\",\n        waldo_swashbuckling_musketeers: \"https://free.iiifhosting.com/iiif/ebff18fc0d3437fe00c5a97eb3daa25bb0e23637c246b4fc81000f7c0f55d558/info.json\",\n        waldo_song_and_dance: \"https://free.iiifhosting.com/iiif/34886c4f5a8bd1ce24de463803cba7bad24fefc10488df3bce09f342d70aac64/info.json\",\n        waldo_ali_baba_thieves: \"https://free.iiifhosting.com/iiif/ee225a23beee67414fbcbd787bddfd52aa73380ae3651673ebec9165f0063ca2/info.json\",\n        waldo_robin_hood: \"https://free.iiifhosting.com/iiif/d33181ea081d35aaa79ff5e2c2e9cd3cab6a1f0c4abd4c84657fca667375fba3/info.json\",\n        waldo_stars: \"https://free.iiifhosting.com/iiif/3800b5f976c8f05e3aafee9ac78a8a9349d3555fe2a578d5496e22ecf089346b/info.json\",\n        wald_horseplay_troy: \"https://free.iiifhosting.com/iiif/5fcdef097340bdb25431ea7573f35a75e0831da1d99f3f9abe560738bbf72938/info.json\",\n        waldo_waldos: \"https://free.iiifhosting.com/iiif/b67cb4e5ac5acde091792fbdde1d0b5e1a15485901777de8d95a56a32c2f8fda/info.json\",\n    }\n\n  return (\n      <>\n          <Information />\n          <MultiViewer\n              height=\"100%\"\n              width=\"100%\"\n              iiifUrls={Object.values(waldos)}\n          />\n      </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}